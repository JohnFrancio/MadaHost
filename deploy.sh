#!/bin/bash
# deploy.sh - Script de d√©ploiement MadaHost

set -e

echo "üöÄ D√©ploiement MadaHost en production"
echo "======================================"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# V√©rifier que nous sommes dans le bon dossier
if [ ! -f "docker-compose.prod.yml" ]; then
    echo -e "${RED}‚ùå Erreur: docker-compose.prod.yml non trouv√©${NC}"
    echo "Assurez-vous d'√™tre dans le dossier racine du projet"
    exit 1
fi

# V√©rifier que .env.production existe
if [ ! -f ".env.production" ]; then
    echo -e "${RED}‚ùå Erreur: .env.production non trouv√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Fichiers de configuration trouv√©s${NC}"

# Arr√™ter les conteneurs existants
echo ""
echo "üõë Arr√™t des conteneurs existants..."
docker-compose -f docker-compose.prod.yml down

# Supprimer les images anciennes (optionnel)
echo ""
echo "üßπ Nettoyage des images anciennes..."
docker image prune -f

# Cr√©er les dossiers n√©cessaires
echo ""
echo "üìÅ Cr√©ation des dossiers..."
mkdir -p nginx/conf.d
mkdir -p nginx/html
mkdir -p backend/logs
mkdir -p backend/temp
mkdir -p backend/builds
mkdir -p backend/public

# Copier les pages d'erreur Nginx
echo ""
echo "üìÑ Configuration des pages d'erreur..."
if [ ! -f "nginx/html/404.html" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  404.html manquant, cr√©ation...${NC}"
    # Cr√©er un fichier 404.html basique si n√©cessaire
fi

# Construire les images
echo ""
echo "üèóÔ∏è  Construction des images Docker..."
docker-compose -f docker-compose.prod.yml build --no-cache

# Cr√©er les volumes s'ils n'existent pas
echo ""
echo "üíæ V√©rification des volumes..."
docker volume create deployed_projects 2>/dev/null || true
docker volume create build_cache 2>/dev/null || true
docker volume create nginx_cache 2>/dev/null || true

# D√©marrer les services
echo ""
echo "üöÄ D√©marrage des services..."
docker-compose -f docker-compose.prod.yml up -d

# Attendre que les services d√©marrent
echo ""
echo "‚è≥ Attente du d√©marrage des services..."
sleep 5

# V√©rifier le statut
echo ""
echo "üîç V√©rification du statut..."
docker-compose -f docker-compose.prod.yml ps

# Tester la sant√© de l'API
echo ""
echo "üè• Test de sant√© de l'API..."
MAX_ATTEMPTS=10
ATTEMPT=0

while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
    if curl -f http://localhost:3001/health >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ API op√©rationnelle${NC}"
        break
    else
        ATTEMPT=$((ATTEMPT + 1))
        echo "Tentative $ATTEMPT/$MAX_ATTEMPTS..."
        sleep 2
    fi
done

if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
    echo -e "${RED}‚ùå L'API ne r√©pond pas${NC}"
    echo "V√©rifiez les logs avec: docker logs madahost_api"
    exit 1
fi

# Afficher les logs r√©cents
echo ""
echo "üìã Logs r√©cents de l'API:"
docker logs --tail=20 madahost_api

echo ""
echo -e "${GREEN}======================================"
echo "‚úÖ D√©ploiement termin√© avec succ√®s!"
echo "======================================${NC}"
echo ""
echo "üîó URLs:"
echo "   - Frontend: https://madahost.me"
echo "   - API: https://api.madahost.me"
echo "   - Sites d√©ploy√©s: https://<nom>.madahost.me"
echo ""
echo "üìä Commandes utiles:"
echo "   - Voir les logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "   - Arr√™ter: docker-compose -f docker-compose.prod.yml down"
echo "   - Red√©marrer: docker-compose -f docker-compose.prod.yml restart"
echo "   - √âtat des services: docker-compose -f docker-compose.prod.yml ps"
echo ""
echo "üîß Volumes:"
echo "   - Projets d√©ploy√©s: /var/lib/docker/volumes/deployed_projects"
echo "   - Cache de build: /var/lib/docker/volumes/build_cache"
echo ""